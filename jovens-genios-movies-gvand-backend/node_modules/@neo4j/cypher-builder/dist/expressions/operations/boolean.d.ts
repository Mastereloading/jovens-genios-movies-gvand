import { CypherASTNode } from "../../CypherASTNode";
import type { Predicate } from "../../types";
declare type BooleanOperator = "AND" | "NOT" | "OR";
export declare abstract class BooleanOp extends CypherASTNode {
    protected operator: BooleanOperator;
    constructor(operator: BooleanOperator);
}
export declare function and(left: Predicate, right: Predicate, ...extra: Array<Predicate | undefined>): BooleanOp;
export declare function and(...ops: Array<Predicate>): Predicate;
export declare function and(...ops: Array<Predicate | undefined>): Predicate | undefined;
export declare function not(child: Predicate): BooleanOp;
export declare function or(left: Predicate, right: Predicate, ...extra: Array<Predicate | undefined>): BooleanOp;
export declare function or(...ops: Array<Predicate>): Predicate;
export declare function or(...ops: Array<Predicate | undefined>): Predicate | undefined;
export {};
//# sourceMappingURL=boolean.d.ts.map