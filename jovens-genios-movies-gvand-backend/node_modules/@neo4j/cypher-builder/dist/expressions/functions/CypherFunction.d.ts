import type { Variable } from "../../variables/Variable";
import { CypherASTNode } from "../../CypherASTNode";
import type { CypherEnvironment } from "../../Environment";
import type { Expr } from "../../types";
export declare class CypherFunction extends CypherASTNode {
    protected name: string;
    private params;
    constructor(name: string, params?: Array<Expr>);
    getCypher(env: CypherEnvironment): string;
}
export declare function coalesce(expr: Expr, ...optionalExpr: Expr[]): CypherFunction;
export declare function point(variable: Expr): CypherFunction;
export declare function distance(lexpr: Expr, rexpr: Expr): CypherFunction;
export declare function pointDistance(lexpr: Expr, rexpr: Expr): CypherFunction;
export declare function labels(nodeRef: Variable): CypherFunction;
export declare function cypherDatetime(): CypherFunction;
export declare function cypherDate(): CypherFunction;
export declare function cypherLocalDatetime(): CypherFunction;
export declare function cypherLocalTime(): CypherFunction;
export declare function cypherTime(): CypherFunction;
export declare function count(expr: Expr): CypherFunction;
export declare function min(expr: Expr): CypherFunction;
export declare function max(expr: Expr): CypherFunction;
export declare function avg(expr: Expr): CypherFunction;
export declare function sum(expr: Expr): CypherFunction;
export declare function randomUUID(): CypherFunction;
//# sourceMappingURL=CypherFunction.d.ts.map