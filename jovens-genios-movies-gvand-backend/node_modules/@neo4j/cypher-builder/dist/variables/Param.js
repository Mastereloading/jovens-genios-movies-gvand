"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamedParam = exports.Param = void 0;
const Reference_1 = require("./Reference");
class Param extends Reference_1.Reference {
    constructor(value) {
        super("param");
        this.value = value;
    }
    /** Defines if the Param has a value that needs to be returned by the builder */
    get hasValue() {
        return this.value !== undefined;
    }
    getCypher(env) {
        if (this.isNull) {
            return "NULL";
        }
        return `$${env.getReferenceId(this)}`;
    }
    get isNull() {
        return this.value === null;
    }
}
exports.Param = Param;
class NamedParam extends Param {
    constructor(name, value) {
        super(value);
        this.id = name;
    }
    getCypher(env) {
        env.addNamedParamReference(this.id, this);
        return super.getCypher(env);
    }
}
exports.NamedParam = NamedParam;
//# sourceMappingURL=Param.js.map