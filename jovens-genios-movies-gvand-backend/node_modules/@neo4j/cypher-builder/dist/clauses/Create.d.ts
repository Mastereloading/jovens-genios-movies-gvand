import type { CypherEnvironment } from "../Environment";
import type { NodeRef } from "../variables/NodeRef";
import type { Param } from "../variables/Param";
import { Clause } from "./Clause";
import { WithReturn } from "./mixins/WithReturn";
import { WithSet } from "./mixins/WithSet";
declare type Params = Record<string, Param<any>>;
export interface Create extends WithReturn, WithSet {
}
export declare class Create extends Clause {
    private pattern;
    constructor(node: NodeRef, params?: Params);
    getCypher(env: CypherEnvironment): string;
}
export {};
//# sourceMappingURL=Create.d.ts.map