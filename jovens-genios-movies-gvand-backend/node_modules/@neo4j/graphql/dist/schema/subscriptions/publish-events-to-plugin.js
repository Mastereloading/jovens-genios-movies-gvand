"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishEventsToPlugin = void 0;
const neo4j_serializers_1 = require("../../utils/neo4j-serializers");
function publishEventsToPlugin(executeResult, plugin) {
    if (plugin) {
        const metadata = executeResult.records[0]?.meta || [];
        for (const rawEvent of metadata) {
            const subscriptionsEvent = serializeEvent(rawEvent);
            if (!subscriptionsEvent) {
                // unsupported event type
                return;
            }
            try {
                const publishPromise = plugin.publish(subscriptionsEvent); // Not using await to avoid blocking
                if (publishPromise) {
                    publishPromise.catch((error) => {
                        console.warn(error);
                    });
                }
            }
            catch (error) {
                console.warn(error);
            }
        }
    }
}
exports.publishEventsToPlugin = publishEventsToPlugin;
function isNodeSubscriptionMeta(event) {
    return ["create", "update", "delete"].includes(event.event);
}
function isRelationshipSubscriptionMeta(event) {
    return ["connect", "disconnect"].includes(event.event);
}
function serializeEvent(event) {
    let properties = {}, extraFields = {};
    if (isNodeSubscriptionMeta(event)) {
        extraFields = {
            typename: event.typename,
        };
        properties = {
            old: serializeProperties(event.properties.old),
            new: serializeProperties(event.properties.new),
        };
    }
    else if (isRelationshipSubscriptionMeta(event)) {
        properties = {
            from: serializeProperties(event.properties.from),
            to: serializeProperties(event.properties.to),
            relationship: serializeProperties(event.properties.relationship),
        };
        extraFields = {
            id_from: (0, neo4j_serializers_1.serializeNeo4jValue)(event.id_from),
            id_to: (0, neo4j_serializers_1.serializeNeo4jValue)(event.id_to),
            fromTypename: (0, neo4j_serializers_1.serializeNeo4jValue)(event.fromTypename),
            toTypename: (0, neo4j_serializers_1.serializeNeo4jValue)(event.toTypename),
            relationshipName: event.relationshipName,
        };
    }
    else {
        return undefined;
    }
    return {
        id: (0, neo4j_serializers_1.serializeNeo4jValue)(event.id),
        ...extraFields,
        timestamp: (0, neo4j_serializers_1.serializeNeo4jValue)(event.timestamp),
        event: event.event,
        properties,
    }; // Casting here because ts is not smart enough to get the difference between create|update|delete
}
function serializeProperties(properties) {
    if (!properties) {
        return undefined;
    }
    return Object.entries(properties).reduce((serializedProps, [k, v]) => {
        serializedProps[k] = (0, neo4j_serializers_1.serializeNeo4jValue)(v);
        return serializedProps;
    }, {});
}
//# sourceMappingURL=publish-events-to-plugin.js.map