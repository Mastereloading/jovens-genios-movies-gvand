"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSubscriptionTypes = void 0;
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
const graphql_1 = require("graphql");
const EventType_1 = require("../../graphql/enums/EventType");
const generate_subscription_where_type_1 = require("./generate-subscription-where-type");
const generate_event_payload_type_1 = require("./generate-event-payload-type");
const subscribe_1 = require("../resolvers/subscriptions/subscribe");
const RelationDirection_1 = require("../../graphql/enums/RelationDirection");
const to_compose_1 = require("../to-compose");
const upper_first_1 = require("../../utils/upper-first");
function generateSubscriptionTypes({ schemaComposer, nodes, relationshipFields, interfaceCommonFields, }) {
    const subscriptionComposer = schemaComposer.Subscription;
    const eventTypeEnum = schemaComposer.createEnumTC(EventType_1.EventType);
    const relationDirectionEnum = schemaComposer.createEnumTC(RelationDirection_1.RelationDirection);
    const shouldIncludeSubscriptionOperation = (node) => !node.exclude?.operations.includes("subscribe");
    const nodesWithSubscriptionOperation = nodes.filter(shouldIncludeSubscriptionOperation);
    const nodeNameToEventPayloadTypes = nodesWithSubscriptionOperation.reduce((acc, node) => {
        acc[node.name] = (0, generate_event_payload_type_1.generateEventPayloadType)(node, schemaComposer);
        return acc;
    }, {});
    nodesWithSubscriptionOperation.forEach((node) => {
        const eventPayload = nodeNameToEventPayloadTypes[node.name];
        const where = (0, generate_subscription_where_type_1.generateSubscriptionWhereType)(node, schemaComposer);
        const { subscriptionEventTypeNames, subscriptionEventPayloadFieldNames, rootTypeFieldNames } = node;
        const { subscribe: subscribeOperation } = rootTypeFieldNames;
        const nodeCreatedEvent = schemaComposer.createObjectTC({
            name: subscriptionEventTypeNames.create,
            fields: {
                event: {
                    type: eventTypeEnum.NonNull,
                    resolve: () => EventType_1.EventType.getValue("CREATE")?.value,
                },
                timestamp: {
                    type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat),
                    resolve: (source) => source.timestamp,
                },
            },
        });
        const nodeUpdatedEvent = schemaComposer.createObjectTC({
            name: subscriptionEventTypeNames.update,
            fields: {
                event: {
                    type: eventTypeEnum.NonNull,
                    resolve: () => EventType_1.EventType.getValue("UPDATE")?.value,
                },
                timestamp: {
                    type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat),
                    resolve: (source) => source.timestamp,
                },
            },
        });
        const nodeDeletedEvent = schemaComposer.createObjectTC({
            name: subscriptionEventTypeNames.delete,
            fields: {
                event: {
                    type: eventTypeEnum.NonNull,
                    resolve: () => EventType_1.EventType.getValue("DELETE")?.value,
                },
                timestamp: {
                    type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat),
                    resolve: (source) => source.timestamp,
                },
            },
        });
        // eslint-disable-next-line no-constant-condition
        if (false) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const relationConnectedEvent = schemaComposer.createObjectTC({
                name: subscriptionEventTypeNames.connect,
                fields: {
                    event: {
                        type: eventTypeEnum.NonNull,
                        resolve: () => EventType_1.EventType.getValue("CONNECT")?.value,
                    },
                    timestamp: {
                        type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat),
                        resolve: (source) => source.timestamp,
                    },
                },
            });
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const relationDisconnectedEvent = schemaComposer.createObjectTC({
                name: subscriptionEventTypeNames.disconnect,
                fields: {
                    event: {
                        type: eventTypeEnum.NonNull,
                        resolve: () => EventType_1.EventType.getValue("DISCONNECT")?.value,
                    },
                    timestamp: {
                        type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLFloat),
                        resolve: (source) => source.timestamp,
                    },
                },
            });
            const connectedTypes = getConnectedTypes({
                node,
                relationshipFields,
                interfaceCommonFields,
                schemaComposer,
                nodeNameToEventPayloadTypes,
            });
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const relationsEventPayload = schemaComposer.createObjectTC({
                name: `${node.name}ConnectedRelationships`,
                fields: connectedTypes,
            });
        }
        if (_hasProperties(eventPayload)) {
            nodeCreatedEvent.addFields({
                [subscriptionEventPayloadFieldNames.create]: {
                    type: eventPayload.NonNull,
                    resolve: (source) => source.properties.new,
                },
            });
            nodeUpdatedEvent.addFields({
                previousState: {
                    type: eventPayload.NonNull,
                    resolve: (source) => source.properties.old,
                },
                [subscriptionEventPayloadFieldNames.update]: {
                    type: eventPayload.NonNull,
                    resolve: (source) => source.properties.new,
                },
            });
            nodeDeletedEvent.addFields({
                [subscriptionEventPayloadFieldNames.delete]: {
                    type: eventPayload.NonNull,
                    resolve: (source) => source.properties.old,
                },
            });
            // eslint-disable-next-line no-constant-condition
            if (false) {
                relationConnectedEvent.addFields({
                    [subscriptionEventPayloadFieldNames.connect]: {
                        type: eventPayload.NonNull,
                        resolve: (source) => {
                            return getRelationshipEventDataForNode(source, node).properties;
                        },
                    },
                    relationshipName: {
                        type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),
                        resolve: (source) => {
                            const r = node.relationFields.find((f) => f.type === source.relationshipName)?.fieldName;
                            return r;
                        },
                    },
                    direction: {
                        type: relationDirectionEnum.NonNull,
                        resolve: (source) => {
                            return getRelationshipEventDataForNode(source, node).direction;
                        },
                    },
                });
                relationDisconnectedEvent.addFields({
                    [subscriptionEventPayloadFieldNames.disconnect]: {
                        type: eventPayload.NonNull,
                        resolve: (source) => {
                            return getRelationshipEventDataForNode(source, node).properties;
                        },
                    },
                    relationshipName: {
                        type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),
                        resolve: (source) => {
                            return node.relationFields.find((f) => f.type === source.relationshipName)?.properties;
                        },
                    },
                    direction: {
                        type: relationDirectionEnum.NonNull,
                        resolve: (source) => {
                            return getRelationshipEventDataForNode(source, node).direction;
                        },
                    },
                });
            }
        }
        // eslint-disable-next-line no-constant-condition
        if (false) {
            if (_hasProperties(relationsEventPayload)) {
                const resolveRelationship = (source) => {
                    const { destinationProperties: props, destinationTypename: typename } = getRelationshipEventDataForNode(source, node);
                    const thisRel = node.relationFields.find((f) => f.type === source.relationshipName);
                    return {
                        [thisRel.fieldName]: {
                            edge: {
                                ...source.properties.relationship,
                            },
                            node: {
                                ...props,
                                __typename: `${typename}EventPayload`,
                            },
                        },
                    };
                };
                relationConnectedEvent.addFields({
                    relationship: {
                        type: relationsEventPayload.NonNull,
                        resolve: resolveRelationship,
                    },
                });
                relationDisconnectedEvent.addFields({
                    relationship: {
                        type: relationsEventPayload.NonNull,
                        resolve: resolveRelationship,
                    },
                });
            }
        }
        subscriptionComposer.addFields({
            [subscribeOperation.created]: {
                args: { where },
                type: nodeCreatedEvent.NonNull,
                subscribe: (0, subscribe_1.generateSubscribeMethod)(node, "create"),
                resolve: subscribe_1.subscriptionResolve,
            },
            [subscribeOperation.updated]: {
                args: { where },
                type: nodeUpdatedEvent.NonNull,
                subscribe: (0, subscribe_1.generateSubscribeMethod)(node, "update"),
                resolve: subscribe_1.subscriptionResolve,
            },
            [subscribeOperation.deleted]: {
                args: { where },
                type: nodeDeletedEvent.NonNull,
                subscribe: (0, subscribe_1.generateSubscribeMethod)(node, "delete"),
                resolve: subscribe_1.subscriptionResolve,
            },
        });
        // eslint-disable-next-line no-constant-condition
        if (false) {
            const connectionWhere = (0, generate_subscription_where_type_1.generateSubscriptionConnectionWhereType)({
                node,
                schemaComposer,
                relationshipFields,
                interfaceCommonFields,
            });
            if (node.relationFields.length > 0) {
                subscriptionComposer.addFields({
                    [subscribeOperation.connected]: {
                        args: { where: connectionWhere },
                        type: relationConnectedEvent.NonNull,
                        subscribe: (0, subscribe_1.generateSubscribeMethod)(node, "connect"),
                        resolve: subscribe_1.subscriptionResolve,
                    },
                    [subscribeOperation.disconnected]: {
                        args: { where: connectionWhere },
                        type: relationDisconnectedEvent.NonNull,
                        subscribe: (0, subscribe_1.generateSubscribeMethod)(node, "disconnect"),
                        resolve: subscribe_1.subscriptionResolve,
                    },
                });
            }
        }
    });
}
exports.generateSubscriptionTypes = generateSubscriptionTypes;
function getRelationshipEventDataForNode(event, node) {
    if (event.toTypename === node.name) {
        return {
            direction: "IN",
            properties: event.properties.to,
            destinationProperties: event.properties.from,
            destinationTypename: event.fromTypename,
        };
    }
    return {
        direction: "OUT",
        properties: event.properties.from,
        destinationProperties: event.properties.to,
        destinationTypename: event.toTypename,
    };
}
function _hasProperties(x) {
    return !!Object.keys(x.getFields()).length;
}
function _buildRelationshipDestinationUnionNodeType({ unionNodes, relationNodeTypeName, schemaComposer, }) {
    const atLeastOneTypeHasProperties = unionNodes.filter(_hasProperties).length;
    if (!atLeastOneTypeHasProperties) {
        return null;
    }
    return schemaComposer.createUnionTC({
        name: `${relationNodeTypeName}EventPayload`,
        types: unionNodes,
    });
}
function _buildRelationshipDestinationInterfaceNodeType({ relevantInterface, interfaceNodes, relationNodeTypeName, schemaComposer, }) {
    const allFields = Object.values(relevantInterface).reduce((acc, x) => [...acc, ...x], []);
    const connectionFields = [...relevantInterface.relationFields, ...relevantInterface.connectionFields];
    const [interfaceComposeFields, interfaceConnectionComposeFields] = [allFields, connectionFields].map(to_compose_1.objectFieldsToComposeFields);
    const nodeTo = schemaComposer.createInterfaceTC({
        name: `${relationNodeTypeName}EventPayload`,
        fields: interfaceComposeFields,
    });
    interfaceNodes?.forEach((interfaceNodeType) => {
        nodeTo.addTypeResolver(interfaceNodeType, () => true);
        interfaceNodeType.addFields(interfaceConnectionComposeFields);
    });
    return nodeTo;
}
function _buildRelationshipDestinationAbstractType({ relationField, relationNodeTypeName, interfaceCommonFields, schemaComposer, nodeNameToEventPayloadTypes, }) {
    const unionNodeTypes = relationField.union?.nodes;
    if (unionNodeTypes) {
        const unionNodes = unionNodeTypes?.map((typeName) => nodeNameToEventPayloadTypes[typeName]);
        return _buildRelationshipDestinationUnionNodeType({ unionNodes, relationNodeTypeName, schemaComposer });
    }
    const interfaceNodeTypeNames = relationField.interface?.implementations;
    if (interfaceNodeTypeNames) {
        const relevantInterfaceFields = interfaceCommonFields.get(relationNodeTypeName) || {};
        const interfaceNodes = interfaceNodeTypeNames.map((name) => nodeNameToEventPayloadTypes[name]);
        return _buildRelationshipDestinationInterfaceNodeType({
            schemaComposer,
            relevantInterface: relevantInterfaceFields,
            interfaceNodes,
            relationNodeTypeName,
        });
    }
    return undefined;
}
function _buildRelationshipFieldDestinationTypes({ relationField, interfaceCommonFields, schemaComposer, nodeNameToEventPayloadTypes, }) {
    const relationNodeTypeName = relationField.typeMeta.name;
    const nodeTo = nodeNameToEventPayloadTypes[relationNodeTypeName];
    if (nodeTo) {
        // standard type
        return _hasProperties(nodeTo) && nodeTo;
    }
    // union/interface type
    return _buildRelationshipDestinationAbstractType({
        relationField,
        relationNodeTypeName,
        interfaceCommonFields,
        schemaComposer,
        nodeNameToEventPayloadTypes,
    });
}
function _buildRelationshipType({ relationField, relationshipFields, schemaComposer, }) {
    const relationshipProperties = relationshipFields.get(relationField.properties || "");
    if (relationshipProperties) {
        return schemaComposer.getOrCreateOTC(`${relationField.properties}RelationshipEventPayload`, (tc) => tc.addFields((0, to_compose_1.objectFieldsToComposeFields)([
            ...relationshipProperties.primitiveFields,
            ...relationshipProperties.enumFields,
            ...relationshipProperties.scalarFields,
            ...relationshipProperties.temporalFields,
            ...relationshipProperties.pointFields,
        ])));
    }
}
// TODO: move this + helpers to separate file
function getConnectedTypes({ node, relationshipFields, interfaceCommonFields, schemaComposer, nodeNameToEventPayloadTypes, }) {
    const { name, relationFields } = node;
    return relationFields
        .map((relationField) => {
        const fieldName = relationField.fieldName;
        const relationshipFieldType = schemaComposer.createObjectTC({
            name: `${name}${(0, upper_first_1.upperFirst)(fieldName)}ConnectedRelationship`,
        });
        const edge = _buildRelationshipType({ relationField, relationshipFields, schemaComposer });
        if (edge) {
            relationshipFieldType.addFields({ edge });
        }
        const nodeTo = _buildRelationshipFieldDestinationTypes({
            relationField,
            interfaceCommonFields,
            schemaComposer,
            nodeNameToEventPayloadTypes,
        });
        if (nodeTo) {
            relationshipFieldType.addFields({ node: nodeTo.getTypeNonNull() });
        }
        return {
            relationshipFieldType,
            fieldName,
        };
    })
        .reduce((acc, { relationshipFieldType, fieldName }) => {
        if (relationshipFieldType && _hasProperties(relationshipFieldType)) {
            acc[fieldName] = relationshipFieldType;
        }
        return acc;
    }, {});
}
//# sourceMappingURL=generate-subscription-types.js.map