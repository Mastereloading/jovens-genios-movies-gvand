"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterRelationshipConnectionsByProperties = exports.filterByProperties = exports.compareProperties = void 0;
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
const neo4j_driver_1 = require("neo4j-driver");
const utils_1 = require("../../../../translate/where/utils");
const utils_2 = require("../../../../utils/utils");
/**
 * Returns true if all properties in obj1 exists in obj2, false otherwise.
 * Properties can only be primitives or Array<primitive>
 */
function compareProperties(obj1, obj2) {
    if (!(0, utils_2.isSameType)(obj1, obj2) || !(0, utils_2.haveSameLength)(obj1, obj2)) {
        return false;
    }
    for (const [k, value] of Object.entries(obj1)) {
        const otherValue = obj2[k];
        if (otherValue === null || otherValue === undefined) {
            return false;
        }
        if (Array.isArray(value) && (0, utils_2.isSameType)(value, otherValue)) {
            const areArraysMatching = compareProperties(value, otherValue);
            if (!areArraysMatching) {
                return false;
            }
        }
        if (!Array.isArray(value) && (0, utils_2.isSameType)(value, otherValue) && otherValue !== value) {
            return false;
        }
    }
    return true;
}
exports.compareProperties = compareProperties;
function isFloatType(fieldMeta) {
    return fieldMeta?.typeMeta.name === "Float";
}
function isStringType(fieldMeta) {
    return fieldMeta?.typeMeta.name === "String";
}
function isIDType(fieldMeta) {
    return fieldMeta?.typeMeta.name === "ID";
}
function isIDAsString(fieldMeta, value) {
    return isIDType(fieldMeta) && (0, neo4j_driver_1.int)(value).toString() !== value;
}
const operatorCheckMap = {
    NOT: (received, filtered) => received !== filtered,
    LT: (received, filtered, fieldMeta) => {
        if (isFloatType(fieldMeta)) {
            return received < filtered;
        }
        return (0, neo4j_driver_1.int)(received).lessThan((0, neo4j_driver_1.int)(filtered));
    },
    LTE: (received, filtered, fieldMeta) => {
        if (isFloatType(fieldMeta)) {
            return received <= filtered;
        }
        return (0, neo4j_driver_1.int)(received).lessThanOrEqual((0, neo4j_driver_1.int)(filtered));
    },
    GT: (received, filtered, fieldMeta) => {
        if (isFloatType(fieldMeta)) {
            return received > filtered;
        }
        return (0, neo4j_driver_1.int)(received).greaterThan((0, neo4j_driver_1.int)(filtered));
    },
    GTE: (received, filtered, fieldMeta) => {
        if (isFloatType(fieldMeta)) {
            return received >= filtered;
        }
        // int/ bigint
        return (0, neo4j_driver_1.int)(received).greaterThanOrEqual((0, neo4j_driver_1.int)(filtered));
    },
    STARTS_WITH: (received, filtered) => received.startsWith(filtered),
    NOT_STARTS_WITH: (received, filtered) => !received.startsWith(filtered),
    ENDS_WITH: (received, filtered) => received.endsWith(filtered),
    NOT_ENDS_WITH: (received, filtered) => !received.endsWith(filtered),
    CONTAINS: (received, filtered) => received.includes(filtered),
    NOT_CONTAINS: (received, filtered) => !received.includes(filtered),
    INCLUDES: (received, filtered, fieldMeta) => {
        if (isFloatType(fieldMeta) || isStringType(fieldMeta) || isIDAsString(fieldMeta, filtered)) {
            return received.findIndex((v) => v === filtered) !== -1;
        }
        // int/ bigint
        const filteredAsNeo4jInteger = (0, neo4j_driver_1.int)(filtered);
        return received.findIndex((r) => (0, neo4j_driver_1.int)(r).equals(filteredAsNeo4jInteger)) !== -1;
    },
    NOT_INCLUDES: (received, filtered, fieldMeta) => {
        if (isFloatType(fieldMeta) || isStringType(fieldMeta) || isIDAsString(fieldMeta, filtered)) {
            return received.findIndex((v) => v === filtered) === -1;
        }
        // int/ bigint
        const filteredAsNeo4jInteger = (0, neo4j_driver_1.int)(filtered);
        return received.findIndex((r) => (0, neo4j_driver_1.int)(r).equals(filteredAsNeo4jInteger)) === -1;
    },
    IN: (received, filtered, fieldMeta) => {
        if (isFloatType(fieldMeta) || isStringType(fieldMeta) || isIDAsString(fieldMeta, received)) {
            return filtered.findIndex((v) => v === received) !== -1;
        }
        // int/ bigint
        const receivedAsNeo4jInteger = (0, neo4j_driver_1.int)(received);
        return filtered.findIndex((r) => (0, neo4j_driver_1.int)(r).equals(receivedAsNeo4jInteger)) !== -1;
    },
    NOT_IN: (received, filtered, fieldMeta) => {
        if (isFloatType(fieldMeta) || isStringType(fieldMeta) || isIDAsString(fieldMeta, received)) {
            return filtered.findIndex((v) => v === received) === -1;
        }
        // int/ bigint
        const receivedAsNeo4jInteger = (0, neo4j_driver_1.int)(received);
        return filtered.findIndex((r) => (0, neo4j_driver_1.int)(r).equals(receivedAsNeo4jInteger)) === -1;
    },
};
function getFilteringFn(operator) {
    if (!operator) {
        return (received, filtered) => received === filtered;
    }
    return operatorCheckMap[operator];
}
function parseFilterProperty(key) {
    const match = utils_1.whereRegEx.exec(key);
    if (!match) {
        throw new Error(`Failed to match key in filter: ${key}`);
    }
    const { fieldName, operator } = match.groups;
    if (!fieldName) {
        throw new Error(`Failed to find field name in filter: ${key}`);
    }
    return { fieldName, operator };
}
const multipleConditionsAggregationMap = {
    AND: (results) => {
        for (const res of results) {
            if (!res) {
                return false;
            }
        }
        return true;
    },
    OR: (results) => {
        for (const res of results) {
            if (res) {
                return true;
            }
        }
        return false;
    },
};
/** Returns true if receivedProperties comply with filters specified in whereProperties, false otherwise. */
function filterByProperties(node, whereProperties, receivedProperties) {
    for (const [k, v] of Object.entries(whereProperties)) {
        if (Object.keys(multipleConditionsAggregationMap).includes(k)) {
            const comparisonResultsAggregationFn = multipleConditionsAggregationMap[k];
            const comparisonResults = v.map((whereCl) => {
                return filterByProperties(node, whereCl, receivedProperties);
            });
            if (!comparisonResultsAggregationFn(comparisonResults)) {
                return false;
            }
        }
        else {
            const { fieldName, operator } = parseFilterProperty(k);
            const receivedValue = receivedProperties[fieldName];
            if (!receivedValue) {
                return false;
            }
            const fieldMeta = node.primitiveFields.find((f) => f.fieldName === fieldName);
            const checkFilterPasses = getFilteringFn(operator);
            if (!checkFilterPasses(receivedValue, v, fieldMeta)) {
                return false;
            }
        }
    }
    return true;
}
exports.filterByProperties = filterByProperties;
function filterRelationshipConnectionsByProperties(node, whereProperties, receivedEvent) {
    const receivedProperties = receivedEvent.properties;
    const relationshipName = receivedEvent.relationshipName;
    const relationships = node.relationFields.filter((f) => f.type === relationshipName);
    if (relationships.length === 0) {
        return false;
    }
    for (const [k, v] of Object.entries(whereProperties)) {
        const { fieldName, operator } = parseFilterProperty(k);
        const checkFilterPasses = getFilteringFn(operator);
        const connectedNodeFieldName = node.subscriptionEventPayloadFieldNames.connect;
        if (fieldName === connectedNodeFieldName) {
            const inFrom = filterByProperties(node, v, receivedProperties.from);
            const inTo = filterByProperties(node, v, receivedProperties.to);
            if (!inFrom && !inTo) {
                return false;
            }
        }
        if (fieldName === "relationshipName") {
            const relationWithRelationshipName = relationships.find((r) => {
                return checkFilterPasses(r.fieldName, v);
            });
            if (!relationWithRelationshipName) {
                return false;
            }
        }
        if (fieldName === "direction") {
            const relationWithDirection = relationships.find((r) => {
                return checkFilterPasses(r.direction, v);
            });
            if (!relationWithDirection) {
                return false;
            }
        }
        if (fieldName === "relationship") {
            // TODO
        }
    }
    return true;
}
exports.filterRelationshipConnectionsByProperties = filterRelationshipConnectionsByProperties;
//# sourceMappingURL=compare-properties.js.map