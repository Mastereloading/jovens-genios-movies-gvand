/// <reference types="node" />
import type { EventEmitter } from "events";
import type { InputValueDefinitionNode, DirectiveNode, TypeNode, GraphQLSchema } from "graphql";
import type { ResolveTree } from "graphql-parse-resolve-info";
import type { Driver, Integer, Session, Transaction } from "neo4j-driver";
import type { Node, Relationship } from "./classes";
import type { Neo4jDatabaseInfo } from "./classes/Neo4jDatabaseInfo";
import type { RelationshipQueryDirectionOption } from "./constants";
import type { Executor } from "./classes/Executor";
import type { Directive } from "graphql-compose";
import type { Entity } from "./schema-model/Entity";
export { Node } from "./classes";
export declare type DriverConfig = {
    database?: string;
    bookmarks?: string | string[];
};
export interface AuthContext {
    isAuthenticated: boolean;
    roles: string[];
    jwt?: JwtPayload;
}
export interface Context {
    driver?: Driver;
    driverConfig?: DriverConfig;
    resolveTree: ResolveTree;
    neo4jDatabaseInfo: Neo4jDatabaseInfo;
    nodes: Node[];
    relationships: Relationship[];
    entities: Map<string, Entity>;
    schema: GraphQLSchema;
    auth?: AuthContext;
    callbacks?: Neo4jGraphQLCallbacks;
    plugins?: Neo4jGraphQLPlugins;
    jwt?: JwtPayload;
    subscriptionsEnabled: boolean;
    executionContext: Driver | Session | Transaction;
    executor: Executor;
    [k: string]: any;
}
export interface BaseAuthRule {
    isAuthenticated?: boolean;
    allowUnauthenticated?: boolean;
    allow?: {
        [k: string]: any;
    } | "*";
    bind?: {
        [k: string]: any;
    } | "*";
    where?: {
        [k: string]: any;
    } | "*";
    roles?: string[];
    AND?: BaseAuthRule[];
    OR?: BaseAuthRule[];
}
export interface AuthRule extends BaseAuthRule {
    operations?: AuthOperations[];
}
export interface Auth {
    rules: AuthRule[];
    type: "JWT";
}
export declare type FulltextIndex = {
    name: string | undefined;
    fields: string[];
    queryType: string;
    queryName: string | undefined;
    indexName: string | undefined;
};
export declare type FullText = {
    indexes: FulltextIndex[];
};
/**
 * Metadata about a field.type on either
 * FieldDefinitionNode or InputValueDefinitionNode.
 */
export interface TypeMeta {
    name: string;
    array?: boolean;
    required: boolean;
    pretty: string;
    input: {
        where: {
            type: string;
            pretty: string;
        };
        create: {
            type: string;
            pretty: string;
        };
        update: {
            type: string;
            pretty: string;
        };
    };
    originalType?: TypeNode;
}
export interface Unique {
    constraintName: string;
}
export interface Callback {
    operations: CallbackOperations[];
    callbackName: string;
}
/**
 * Representation a ObjectTypeDefinitionNode field.
 */
export interface BaseField {
    fieldName: string;
    typeMeta: TypeMeta;
    otherDirectives: DirectiveNode[];
    arguments: InputValueDefinitionNode[];
    private?: boolean;
    auth?: Auth;
    description?: string;
    readonly?: boolean;
    writeonly?: boolean;
    dbPropertyName?: string;
    unique?: Unique;
}
/**
 * Representation of the `@relationship` directive and its meta.
 */
export interface RelationField extends BaseField {
    direction: "OUT" | "IN";
    type: string;
    connectionPrefix?: string;
    inherited: boolean;
    properties?: string;
    union?: UnionField;
    interface?: InterfaceField;
    queryDirection: RelationshipQueryDirectionOption;
}
export interface ConnectionField extends BaseField {
    relationship: RelationField;
    relationshipTypeName: string;
}
/**
 * Representation of the `@cypher` directive and its meta.
 */
export interface CypherField extends BaseField {
    statement: string;
    isEnum: boolean;
    isScalar: boolean;
}
/**
 * Representation of any field thats not
 * a cypher directive or relationship directive
 * String, Int, Float, ID, Boolean... (custom scalars).
 */
export interface PrimitiveField extends BaseField {
    autogenerate?: boolean;
    defaultValue?: any;
    coalesceValue?: any;
    callback?: Callback;
    isGlobalIdField?: boolean;
}
export declare type CustomScalarField = BaseField;
export interface CustomEnumField extends BaseField {
    kind: string;
    defaultValue?: string;
    coalesceValue?: string;
}
export interface UnionField extends BaseField {
    nodes?: string[];
}
export interface CustomResolverField extends BaseField {
    requiredFields: string[];
}
export interface InterfaceField extends BaseField {
    implementations?: string[];
}
export declare type ObjectField = BaseField;
export interface TemporalField extends PrimitiveField {
    timestamps?: TimeStampOperations[];
}
export declare type PointField = BaseField;
export declare type SortableField = PrimitiveField | CustomScalarField | CustomEnumField | TemporalField | PointField | CypherField;
export declare type SortDirection = "ASC" | "DESC";
export interface GraphQLSortArg {
    [field: string]: SortDirection;
}
export interface NestedGraphQLSortArg {
    [field: string]: GraphQLSortArg;
}
export interface ConnectionSortArg {
    node?: GraphQLSortArg;
    edge?: GraphQLSortArg;
}
export interface ConnectionQueryArgs {
    where?: ConnectionWhereArg;
    first?: number;
    after?: string;
    sort?: ConnectionSortArg[];
}
/**
 * Representation of the options arg
 * passed to resolvers.
 */
export interface GraphQLOptionsArg {
    limit?: number | Integer;
    offset?: number | Integer;
    sort?: GraphQLSortArg[];
}
/**
 * Representation of the where arg
 * passed to resolvers.
 */
export interface GraphQLWhereArg {
    [k: string]: any | GraphQLWhereArg | GraphQLWhereArg[];
    AND?: GraphQLWhereArg[];
    OR?: GraphQLWhereArg[];
}
export interface ConnectionWhereArg {
    node?: GraphQLWhereArg;
    node_NOT?: GraphQLWhereArg;
    edge?: GraphQLWhereArg;
    edge_NOT?: GraphQLWhereArg;
    AND?: ConnectionWhereArg[];
    OR?: ConnectionWhereArg[];
}
export interface InterfaceWhereArg {
    _on?: GraphQLWhereArg[];
    [k: string]: any | GraphQLWhereArg | GraphQLWhereArg[];
}
export declare type AuthOperations = "CREATE" | "READ" | "UPDATE" | "DELETE" | "CONNECT" | "DISCONNECT" | "SUBSCRIBE";
export declare type AuthOrders = "pre" | "post";
/**
 * Whats returned when deleting nodes
 */
export interface DeleteInfo {
    nodesDeleted: number;
    relationshipsDeleted: number;
}
export declare type TimeStampOperations = "CREATE" | "UPDATE";
export declare type CallbackOperations = "CREATE" | "UPDATE";
export declare enum CypherRuntime {
    INTERPRETED = "interpreted",
    SLOTTED = "slotted",
    PIPELINED = "pipelined"
}
export declare enum CypherPlanner {
    COST = "cost",
    IDP = "idp",
    DP = "dp"
}
export declare enum CypherConnectComponentsPlanner {
    GREEDY = "greedy",
    IDP = "idp"
}
export declare enum CypherUpdateStrategy {
    DEFAULT = "default",
    EAGER = "eager"
}
export declare enum CypherExpressionEngine {
    DEFAULT = "default",
    INTERPRETED = "interpreted",
    COMPILED = "compiled"
}
export declare enum CypherOperatorEngine {
    DEFAULT = "default",
    INTERPRETED = "interpreted",
    COMPILED = "compiled"
}
export declare enum CypherInterpretedPipesFallback {
    DEFAULT = "default",
    DISABLED = "disabled",
    WHITELISTED_PLANS_ONLY = "whitelisted_plans_only",
    ALL = "all"
}
export declare enum CypherReplanning {
    DEFAULT = "default",
    FORCE = "force",
    SKIP = "skip"
}
export interface CypherQueryOptions {
    runtime?: CypherRuntime;
    planner?: CypherPlanner;
    connectComponentsPlanner?: CypherConnectComponentsPlanner;
    updateStrategy?: CypherUpdateStrategy;
    expressionEngine?: CypherExpressionEngine;
    operatorEngine?: CypherOperatorEngine;
    interpretedPipesFallback?: CypherInterpretedPipesFallback;
    replan?: CypherReplanning;
}
/** Input field for graphql-compose */
export declare type InputField = {
    type: string;
    defaultValue?: string;
    directives?: Directive[];
} | string;
export interface Neo4jGraphQLAuthPlugin {
    rolesPath?: string;
    isGlobalAuthenticationEnabled?: boolean;
    decode<T>(token: string): Promise<T | undefined>;
}
/** Raw event metadata returned from queries */
export declare type NodeSubscriptionMeta = {
    event: "create" | "update" | "delete";
    typename: string;
    properties: {
        old: Record<string, any>;
        new: Record<string, any>;
    };
    id: Integer | string | number;
    timestamp: Integer | string | number;
};
export declare type RelationshipSubscriptionMeta = {
    event: "connect" | "disconnect";
    relationshipName: string;
    id_from: Integer | string | number;
    id_to: Integer | string | number;
    fromTypename: string;
    toTypename: string;
    properties: {
        from: Record<string, any>;
        to: Record<string, any>;
        relationship: Record<string, any>;
    };
    id: Integer | string | number;
    timestamp: Integer | string | number;
};
export declare type EventMeta = NodeSubscriptionMeta | RelationshipSubscriptionMeta;
export declare type NodeSubscriptionsEvent = {
    event: "create";
    typename: string;
    properties: {
        old: undefined;
        new: Record<string, any>;
    };
    id: number;
    timestamp: number;
} | {
    event: "update";
    typename: string;
    properties: {
        old: Record<string, any>;
        new: Record<string, any>;
    };
    id: number;
    timestamp: number;
} | {
    event: "delete";
    typename: string;
    properties: {
        old: Record<string, any>;
        new: undefined;
    };
    id: number;
    timestamp: number;
};
export declare type RelationshipSubscriptionsEvent = {
    event: "connect";
    relationshipName: string;
    properties: {
        from: Record<string, any>;
        to: Record<string, any>;
        relationship: Record<string, any>;
    };
    id_from: number;
    id_to: number;
    fromTypename: string;
    toTypename: string;
    id: number;
    timestamp: number;
} | {
    event: "disconnect";
    relationshipName: string;
    properties: {
        from: Record<string, any>;
        to: Record<string, any>;
        relationship: Record<string, any>;
    };
    id_from: number;
    id_to: number;
    fromTypename: string;
    toTypename: string;
    id: number;
    timestamp: number;
};
/** Serialized subscription event */
export declare type SubscriptionsEvent = NodeSubscriptionsEvent | RelationshipSubscriptionsEvent;
export interface Neo4jGraphQLSubscriptionsPlugin {
    events: EventEmitter;
    publish(eventMeta: SubscriptionsEvent): Promise<void> | void;
    /** To be called, if needed, in getSchema */
    init?(): Promise<void>;
}
export interface Neo4jGraphQLPlugins {
    auth?: Neo4jGraphQLAuthPlugin;
    subscriptions?: Neo4jGraphQLSubscriptionsPlugin;
}
export interface JwtPayload {
    [key: string]: any;
    iss?: string | undefined;
    sub?: string | undefined;
    aud?: string | string[] | undefined;
    exp?: number | undefined;
    nbf?: number | undefined;
    iat?: number | undefined;
    jti?: string | undefined;
}
export declare type CallbackReturnValue = string | number | boolean | undefined | null;
export declare type Neo4jGraphQLCallback = (parent: Record<string, unknown>, args: Record<string, never>, context: Record<string, unknown>) => CallbackReturnValue | Promise<CallbackReturnValue>;
export declare type Neo4jGraphQLCallbacks = Record<string, Neo4jGraphQLCallback>;
export interface Neo4jStringFiltersSettings {
    GT?: boolean;
    GTE?: boolean;
    LT?: boolean;
    LTE?: boolean;
}
export interface Neo4jFiltersSettings {
    String?: Neo4jStringFiltersSettings;
}
export interface Neo4jFeaturesSettings {
    filters?: Neo4jFiltersSettings;
}
//# sourceMappingURL=types.d.ts.map