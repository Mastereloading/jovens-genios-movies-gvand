"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWherePredicate = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
// Recursive function
const create_property_where_1 = require("./property-operations/create-property-where");
function isWhereOperator(key) {
    return ["OR", "AND"].includes(key);
}
/** Translate a target node and GraphQL input into a Cypher operation o valid where expression */
function createWherePredicate({ targetElement, whereInput, context, element, }) {
    const whereFields = Object.entries(whereInput);
    const predicates = whereFields.map(([key, value]) => {
        if (isWhereOperator(key)) {
            return createNestedPredicate({
                key,
                element,
                targetElement,
                context,
                value,
            });
        }
        return (0, create_property_where_1.createPropertyWhere)({ key, value, element, targetElement, context });
    });
    // Implicit AND
    return cypher_builder_1.default.and(...predicates);
}
exports.createWherePredicate = createWherePredicate;
function createNestedPredicate({ key, element, targetElement, context, value, }) {
    const nested = value.map((v) => {
        return createWherePredicate({ whereInput: v, element, targetElement, context });
    });
    if (key === "OR") {
        return cypher_builder_1.default.or(...nested);
    }
    return cypher_builder_1.default.and(...nested);
}
//# sourceMappingURL=create-where-predicate.js.map