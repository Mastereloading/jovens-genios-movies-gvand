"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRelationshipOperation = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
// Recursive function
const create_where_predicate_1 = require("../create-where-predicate");
function createRelationshipOperation({ relationField, context, parentNode, operator, value, isNot, }) {
    const refNode = context.nodes.find((n) => n.name === relationField.typeMeta.name);
    if (!refNode)
        throw new Error("Relationship filters must reference nodes");
    const childNode = new cypher_builder_1.default.Node({ labels: refNode.getLabels(context) });
    const relationship = new cypher_builder_1.default.Relationship({
        source: relationField.direction === "IN" ? childNode : parentNode,
        target: relationField.direction === "IN" ? parentNode : childNode,
        type: relationField.type,
    });
    const matchPattern = relationship.pattern({
        source: relationField.direction === "IN" ? { variable: true } : { labels: false },
        target: relationField.direction === "IN" ? { labels: false } : { variable: true },
        relationship: { variable: false },
    });
    // TODO: check null in return projection
    if (value === null) {
        const existsSubquery = new cypher_builder_1.default.Match(matchPattern, {});
        const exists = new cypher_builder_1.default.Exists(existsSubquery);
        if (!isNot) {
            // Bit confusing, but basically checking for not null is the same as checking for relationship exists
            return cypher_builder_1.default.not(exists);
        }
        return exists;
    }
    const relationOperator = (0, create_where_predicate_1.createWherePredicate)({
        // Nested properties here
        whereInput: value,
        targetElement: childNode,
        element: refNode,
        context,
    });
    if (!relationOperator) {
        return undefined;
    }
    // TODO: use EXISTS in top-level where
    switch (operator) {
        case "ALL": {
            // Testing "ALL" requires testing that at least one element exists and that no elements not matching the filter exists
            const existsMatch = new cypher_builder_1.default.Match(matchPattern).where(relationOperator);
            const existsMatchNot = new cypher_builder_1.default.Match(matchPattern).where(cypher_builder_1.default.not(relationOperator));
            return cypher_builder_1.default.and(new cypher_builder_1.default.Exists(existsMatch), cypher_builder_1.default.not(new cypher_builder_1.default.Exists(existsMatchNot)));
        }
        case "NOT":
        case "NONE": {
            const relationshipMatch = new cypher_builder_1.default.Match(matchPattern).where(relationOperator);
            const existsPredicate = new cypher_builder_1.default.Exists(relationshipMatch);
            return cypher_builder_1.default.not(existsPredicate);
        }
        case "SINGLE": {
            const patternComprehension = new cypher_builder_1.default.PatternComprehension(matchPattern, childNode);
            return cypher_builder_1.default.single(childNode, patternComprehension, relationOperator);
        }
        case "SOME":
        default: {
            const relationshipMatch = new cypher_builder_1.default.Match(matchPattern).where(relationOperator);
            const existsPredicate = new cypher_builder_1.default.Exists(relationshipMatch);
            return existsPredicate;
        }
    }
}
exports.createRelationshipOperation = createRelationshipOperation;
//# sourceMappingURL=create-relationship-operation.js.map