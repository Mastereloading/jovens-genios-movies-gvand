"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_auth_and_params_1 = require("./create-auth-and-params");
const create_connection_where_and_params_1 = __importDefault(require("./where/create-connection-where-and-params"));
const constants_1 = require("../constants");
const create_event_meta_1 = require("./subscriptions/create-event-meta");
const filter_meta_variable_1 = require("./subscriptions/filter-meta-variable");
function createDeleteAndParams({ deleteInput, varName, node, parentVar, chainStr, withVars, context, insideDoWhen, parameterPrefix, recursing, }) {
    function reducer(res, [key, value]) {
        const relationField = node.relationFields.find((x) => key === x.fieldName);
        if (relationField) {
            const refNodes = [];
            const relationship = context.relationships.find((x) => x.properties === relationField.properties);
            if (relationField.union) {
                Object.keys(value).forEach((unionTypeName) => {
                    refNodes.push(context.nodes.find((x) => x.name === unionTypeName));
                });
            }
            else if (relationField.interface) {
                relationField.interface.implementations?.forEach((implementationName) => {
                    refNodes.push(context.nodes.find((x) => x.name === implementationName));
                });
            }
            else {
                refNodes.push(context.nodes.find((x) => x.name === relationField.typeMeta.name));
            }
            const inStr = relationField.direction === "IN" ? "<-" : "-";
            const outStr = relationField.direction === "OUT" ? "->" : "-";
            refNodes.forEach((refNode) => {
                const v = relationField.union ? value[refNode.name] : value;
                const deletes = relationField.typeMeta.array ? v : [v];
                deletes.forEach((d, index) => {
                    const variableName = chainStr
                        ? `${varName}${index}`
                        : `${varName}_${key}${relationField.union || relationField.interface ? `_${refNode.name}` : ""}${index}`;
                    const relationshipVariable = `${variableName}_relationship`;
                    const relTypeStr = `[${relationshipVariable}:${relationField.type}]`;
                    const whereStrs = [];
                    if (d.where) {
                        try {
                            const whereAndParams = (0, create_connection_where_and_params_1.default)({
                                nodeVariable: variableName,
                                whereInput: d.where,
                                node: refNode,
                                context,
                                relationshipVariable,
                                relationship,
                                parameterPrefix: `${parameterPrefix}${!recursing ? `.${key}` : ""}${relationField.union ? `.${refNode.name}` : ""}${relationField.typeMeta.array ? `[${index}]` : ""}.where`,
                            });
                            if (whereAndParams[0]) {
                                whereStrs.push(whereAndParams[0]);
                                res.params = { ...res.params, ...whereAndParams[1] };
                            }
                        }
                        catch {
                            return;
                        }
                    }
                    if (withVars) {
                        res.strs.push(`WITH ${withVars.join(", ")}`);
                    }
                    const labels = refNode.getLabelString(context);
                    res.strs.push(`OPTIONAL MATCH (${parentVar})${inStr}${relTypeStr}${outStr}(${variableName}${labels})`);
                    const whereAuth = (0, create_auth_and_params_1.createAuthAndParams)({
                        operations: "DELETE",
                        entity: refNode,
                        context,
                        where: { varName: variableName, node: refNode },
                    });
                    if (whereAuth[0]) {
                        whereStrs.push(whereAuth[0]);
                        res.params = { ...res.params, ...whereAuth[1] };
                    }
                    if (whereStrs.length) {
                        res.strs.push(`WHERE ${whereStrs.join(" AND ")}`);
                    }
                    const allowAuth = (0, create_auth_and_params_1.createAuthAndParams)({
                        entity: refNode,
                        operations: "DELETE",
                        context,
                        escapeQuotes: Boolean(insideDoWhen),
                        allow: { parentNode: refNode, varName: variableName },
                    });
                    if (allowAuth[0]) {
                        const quote = insideDoWhen ? `\\"` : `"`;
                        res.strs.push(`WITH ${[...withVars, variableName].join(", ")}`);
                        res.strs.push(`CALL apoc.util.validate(NOT (${allowAuth[0]}), ${quote}${constants_1.AUTH_FORBIDDEN_ERROR}${quote}, [0])`);
                        res.params = { ...res.params, ...allowAuth[1] };
                    }
                    if (d.delete) {
                        const nestedDeleteInput = Object.entries(d.delete)
                            .filter(([k]) => {
                            if (k === "_on") {
                                return false;
                            }
                            if (relationField.interface && d.delete?._on?.[refNode.name]) {
                                const onArray = Array.isArray(d.delete._on[refNode.name])
                                    ? d.delete._on[refNode.name]
                                    : [d.delete._on[refNode.name]];
                                if (onArray.some((onKey) => Object.prototype.hasOwnProperty.call(onKey, k))) {
                                    return false;
                                }
                            }
                            return true;
                        })
                            .reduce((d1, [k1, v1]) => ({ ...d1, [k1]: v1 }), {});
                        const deleteAndParams = createDeleteAndParams({
                            context,
                            node: refNode,
                            deleteInput: nestedDeleteInput,
                            varName: variableName,
                            withVars: [...withVars, variableName],
                            parentVar: variableName,
                            parameterPrefix: `${parameterPrefix}${!recursing ? `.${key}` : ""}${relationField.union ? `.${refNode.name}` : ""}${relationField.typeMeta.array ? `[${index}]` : ""}.delete`,
                            recursing: false,
                        });
                        res.strs.push(deleteAndParams[0]);
                        res.params = { ...res.params, ...deleteAndParams[1] };
                        if (relationField.interface && d.delete?._on?.[refNode.name]) {
                            const onDeletes = Array.isArray(d.delete._on[refNode.name])
                                ? d.delete._on[refNode.name]
                                : [d.delete._on[refNode.name]];
                            onDeletes.forEach((onDelete, onDeleteIndex) => {
                                const onDeleteAndParams = createDeleteAndParams({
                                    context,
                                    node: refNode,
                                    deleteInput: onDelete,
                                    varName: variableName,
                                    withVars: [...withVars, variableName],
                                    parentVar: variableName,
                                    parameterPrefix: `${parameterPrefix}${!recursing ? `.${key}` : ""}${relationField.union ? `.${refNode.name}` : ""}${relationField.typeMeta.array ? `[${index}]` : ""}.delete._on.${refNode.name}[${onDeleteIndex}]`,
                                    recursing: false,
                                });
                                res.strs.push(onDeleteAndParams[0]);
                                res.params = { ...res.params, ...onDeleteAndParams[1] };
                            });
                        }
                    }
                    const nodeToDelete = `${variableName}_to_delete`;
                    res.strs.push(`WITH ${[...withVars, `collect(DISTINCT ${variableName}) as ${nodeToDelete}`].join(", ")}`);
                    if (context.subscriptionsEnabled) {
                        const metaObjectStr = (0, create_event_meta_1.createEventMetaObject)({
                            event: "delete",
                            nodeVariable: "n",
                            typename: refNode.name,
                        });
                        const reduceStr = `REDUCE(m=${constants_1.META_CYPHER_VARIABLE}, n IN ${nodeToDelete} | m + ${metaObjectStr}) AS ${constants_1.META_CYPHER_VARIABLE}`;
                        res.strs.push(`WITH ${[...(0, filter_meta_variable_1.filterMetaVariable)(withVars), nodeToDelete].join(", ")}, ${reduceStr}`);
                    }
                    res.strs.push("CALL {");
                    res.strs.push(`\tWITH ${variableName}_to_delete`);
                    res.strs.push(`\tUNWIND ${variableName}_to_delete AS x`);
                    res.strs.push(`\tDETACH DELETE x`);
                    res.strs.push("\tRETURN count(*) AS _"); // Avoids CANNOT END WITH DETACH DELETE ERROR
                    res.strs.push("}");
                    // TODO - relationship validation
                });
            });
            return res;
        }
        return res;
    }
    const { strs, params } = Object.entries(deleteInput).reduce(reducer, { strs: [], params: {} });
    return [strs.join("\n"), params];
}
exports.default = createDeleteAndParams;
//# sourceMappingURL=create-delete-and-params.js.map