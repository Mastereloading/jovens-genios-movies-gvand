"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFieldAggregationAuth = void 0;
const constants_1 = require("../../constants");
const create_auth_and_params_1 = require("../create-auth-and-params");
function createFieldAggregationAuth({ node, context, subqueryNodeAlias, nodeFields, }) {
    const allowAuth = getAllowAuth({ node, context, varName: subqueryNodeAlias });
    const whereAuth = getWhereAuth({ node, context, varName: subqueryNodeAlias });
    const nodeAuth = getFieldAuth({ fields: nodeFields, node, context, varName: subqueryNodeAlias });
    const cypherStrs = [...nodeAuth.queries, ...allowAuth.queries, ...whereAuth.queries];
    const cypherParams = { ...nodeAuth.params, ...allowAuth.params, ...whereAuth.params };
    return { params: cypherParams, whereQuery: cypherStrs.join(" AND\n") };
}
exports.createFieldAggregationAuth = createFieldAggregationAuth;
function getAllowAuth({ node, context, varName, }) {
    const allowAuth = (0, create_auth_and_params_1.createAuthAndParams)({
        operations: "READ",
        entity: node,
        context,
        allow: {
            parentNode: node,
            varName,
        },
        escapeQuotes: false,
    });
    if (allowAuth[0]) {
        return {
            queries: [`apoc.util.validatePredicate(NOT (${allowAuth[0]}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`],
            params: allowAuth[1],
        };
    }
    return {
        queries: [],
        params: {},
    };
}
function getWhereAuth({ node, context, varName, }) {
    const whereAuth = (0, create_auth_and_params_1.createAuthAndParams)({
        operations: "READ",
        entity: node,
        context,
        where: { varName, node },
    });
    if (whereAuth[0]) {
        return {
            queries: [whereAuth[0]],
            params: whereAuth[1],
        };
    }
    return {
        queries: [],
        params: {},
    };
}
function getFieldAuth({ fields = {}, node, context, varName, }) {
    const authStrs = [];
    let authParams = {};
    Object.entries(fields).forEach((selection) => {
        const authField = node.authableFields.find((x) => x.fieldName === selection[0]);
        if (authField && authField.auth) {
            const allowAndParams = (0, create_auth_and_params_1.createAuthAndParams)({
                entity: authField,
                operations: "READ",
                context,
                allow: { parentNode: node, varName, chainStr: authField.fieldName },
                escapeQuotes: false,
            });
            if (allowAndParams[0]) {
                authStrs.push(allowAndParams[0]);
                authParams = { ...authParams, ...allowAndParams[1] };
            }
        }
    });
    if (authStrs.length > 0) {
        return {
            queries: [`apoc.util.validatePredicate(NOT (${authStrs.join(" AND ")}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`],
            params: authParams,
        };
    }
    return {
        queries: [],
        params: {},
    };
}
//# sourceMappingURL=field-aggregations-auth.js.map